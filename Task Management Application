import tkinter as tk
from tkinter import messagebox
import sqlite3

# Database setup
conn = sqlite3.connect("tasks.db")
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS tasks (
                  id INTEGER PRIMARY KEY AUTOINCREMENT,
                  task TEXT NOT NULL)""")
conn.commit()

# Function to add a new task
def add_task():
    task = task_entry.get()
    if task:
        cursor.execute("INSERT INTO tasks (task) VALUES (?)", (task,))
        conn.commit()
        task_entry.delete(0, tk.END)
        load_tasks()
    else:
        messagebox.showwarning("Input Error", "Please enter a task.")

# Function to load tasks from the database
def load_tasks():
    task_listbox.delete(0, tk.END)
    cursor.execute("SELECT * FROM tasks")
    tasks = cursor.fetchall()
    for task in tasks:
        task_listbox.insert(tk.END, task[1])

# Function to delete a selected task
def delete_task():
    selected_task = task_listbox.curselection()
    if selected_task:
        task_id = selected_task[0] + 1  # Adjust for 0-based indexing
        cursor.execute("DELETE FROM tasks WHERE id=?", (task_id,))
        conn.commit()
        load_tasks()
    else:
        messagebox.showwarning("Select Task", "Please select a task to delete.")

# Function to update a selected task
def update_task():
    selected_task = task_listbox.curselection()
    new_task = task_entry.get()
    if selected_task and new_task:
        task_id = selected_task[0] + 1  # Adjust for 0-based indexing
        cursor.execute("UPDATE tasks SET task = ? WHERE id = ?", (new_task, task_id))
        conn.commit()
        task_entry.delete(0, tk.END)
        load_tasks()
    else:
        messagebox.showwarning("Update Error", "Select a task and enter a new description.")

# GUI setup
root = tk.Tk()
root.title("Task Manager")

task_entry = tk.Entry(root, width=50)
task_entry.pack(pady=10)

add_button = tk.Button(root, text="Add Task", command=add_task)
add_button.pack(pady=5)

update_button = tk.Button(root, text="Update Task", command=update_task)
update_button.pack(pady=5)

delete_button = tk.Button(root, text="Delete Task", command=delete_task)
delete_button.pack(pady=5)

task_listbox = tk.Listbox(root, width=50, height=15)
task_listbox.pack(pady=10)

# Load tasks initially
load_tasks()

root.mainloop()

# Close database connection when app closes
conn.close()
